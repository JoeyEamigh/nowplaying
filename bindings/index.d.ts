/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class NowPlaying {
  constructor(callback: (event: NowPlayingMessage) => void, options?: NowPlayingOptions)
  subscribe(): Promise<void>
  unsubscribe(): Promise<void>
  sendCommand(command: PlayerCommand): Promise<void>
}

export interface LogMessage {
  /** log level (TRACE, DEBUG, INFO, WARN, ERROR) */
  level: string
  /** log target */
  target: string
  /** log message */
  message: string
  /** timestamp in ISO 8601 format */
  timestamp: string
}

/** now playing info */
export interface NowPlayingMessage {
  album?: string
  artist?: Array<string>
  playlist?: string
  playlistId?: string
  trackName: string
  shuffleState?: boolean
  /** "off", "all", "track" */
  repeatState?: string
  isPlaying: boolean
  canFastForward: boolean
  canSkip: boolean
  canLike: boolean
  canChangeVolume: boolean
  canSetOutput: boolean
  trackDuration?: number
  trackProgress?: number
  /** 1.0 = normal speed, 0.5 = half speed, 2.0 = double speed */
  playbackRate?: number
  /** percentage 0-100 */
  volume: number
  /** Name of device that is playing the audio */
  device?: string
  /** A way to identify the current song (if possible - doesn't work on macos) */
  id?: string
  /** a way to identify the current device if needed */
  deviceId?: string
  /** the url of the current song */
  url?: string
  /** either a path on disk or a base64 encoding that includes data:image/png;base64, at the beginning */
  thumbnail?: string
}

export interface NowPlayingOptions {
  logLevelDirective?: string
  logCallback?: (event: LogMessage) => void
}

/** Command to send to the player */
export interface PlayerCommand {
  /**
   * the id of the device to send the command to
   *
   * if None, the command is sent to all devices; ignored on macos
   */
  to?: string
  data: PlayerCommandData
}

export type PlayerCommandData =
  | { type: 'Play' }
  | { type: 'Pause' }
  | { type: 'PlayPause' }
  | { type: 'NextTrack' }
  | { type: 'PreviousTrack' }
  | { type: 'SeekTo', positionMs: number }
  | { type: 'SetVolume', volume: number }
  | { type: 'SetShuffle', shuffle: boolean }
